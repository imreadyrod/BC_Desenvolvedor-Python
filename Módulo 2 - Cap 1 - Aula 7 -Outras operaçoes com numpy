{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Módulo 2 - Cap 1 - Aula 7 -Outras operaçoes com numpy","provenance":[],"authorship_tag":"ABX9TyMIHf7HH7tEMVxQDEJ/PHCy"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"qjbmMz8CFFcD","executionInfo":{"status":"ok","timestamp":1649721805029,"user_tz":180,"elapsed":3,"user":{"displayName":"Rodrigo Oliveira","userId":"08205894918442543497"}}},"outputs":[],"source":["import numpy as np"]},{"cell_type":"markdown","source":["# **Outras operações útei em numpy**"],"metadata":{"id":"qozpWhl4FQ9p"}},{"cell_type":"code","source":["#array \n","x = np.array([[1,3,7], [4,11,21], [42,8,9]])\n","print('x: \\n',x)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jBopkVkcFToY","executionInfo":{"status":"ok","timestamp":1649721863223,"user_tz":180,"elapsed":443,"user":{"displayName":"Rodrigo Oliveira","userId":"08205894918442543497"}},"outputId":"0f4eb38e-0817-4850-a9eb-c5da49258a9f"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["x: \n"," [[ 1  3  7]\n"," [ 4 11 21]\n"," [42  8  9]]\n"]}]},{"cell_type":"code","source":["#reshape: transformar a matriz em um vetor coluna\n","# (3,3) vira (9,1) : 3*3 = 9*1 = 9 # a multiplicação de linhas e colunas originais deve ser igual a matriz que será transformada\n","print('transformação de um vetor em coluna: \\n',x.reshape(9,1))"],"metadata":{"id":"wwairjIlFfOq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#transposição de matriz o que é linha vira coluna\n","print('x transporta: \\n', x.T)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SnMIRD2TF9n3","executionInfo":{"status":"ok","timestamp":1649722006464,"user_tz":180,"elapsed":269,"user":{"displayName":"Rodrigo Oliveira","userId":"08205894918442543497"}},"outputId":"c2642f30-0f16-4821-debe-68b8616d06d0"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["x transporta: \n"," [[ 1  4 42]\n"," [ 3 11  8]\n"," [ 7 21  9]]\n"]}]},{"cell_type":"code","source":["#np.sum: soma em um dado eixo, axis = {0: linha, 1:coluna}\n","print('x: \\n', x)\n","print('soma de todos elementos de x: ',np.sum(x))\n","print('soma de x ao longo das linhas: ',np.sum(x, axis=0))\n","print('soma de x ao longo das colunas:',np.sum(x,axis=1))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y6GqRf69GI6u","executionInfo":{"status":"ok","timestamp":1649722142801,"user_tz":180,"elapsed":324,"user":{"displayName":"Rodrigo Oliveira","userId":"08205894918442543497"}},"outputId":"df76ecba-6574-4b01-8890-06a90a24f642"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["x: \n"," [[ 1  3  7]\n"," [ 4 11 21]\n"," [42  8  9]]\n","soma de todos elementos de x:  106\n","soma de x ao longo das linhas:  [47 22 37]\n","soma de x ao longo das colunas: [11 36 59]\n"]}]},{"cell_type":"code","source":["#np.mean: média em um dado eixo, axis={0:linha,1:coluna}\n","print('x: \\n',x)\n","print('média de todos os elementos de x: ',np.mean(x))\n","print('média de x ao longo das linhas:',np.mean(x,axis=0))\n","print('média de x ao longo das colunas: ',np.mean(x, axis = 1))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yXNYigpDGos2","executionInfo":{"status":"ok","timestamp":1649722266696,"user_tz":180,"elapsed":337,"user":{"displayName":"Rodrigo Oliveira","userId":"08205894918442543497"}},"outputId":"d4b0bd8b-96e3-47e9-9031-4757c4b9d1fd"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["x: \n"," [[ 1  3  7]\n"," [ 4 11 21]\n"," [42  8  9]]\n","média de todos os elementos de x:  11.777777777777779\n","média de x ao longo das linhas: [15.66666667  7.33333333 12.33333333]\n","média de x ao longo das colunas:  [ 3.66666667 12.         19.66666667]\n"]}]},{"cell_type":"code","source":["#np.where, identificação dos índices onde uma dada condição\n","# é atendida. Uso conjunto com indexação booleana\n","cond = x%2 == 0 #números pares\n","print('condição: \\n',cond)\n","i,j = np.where(cond) #índices x[i,j] = x[cond]\n","print('índice i (linhas): ', i)\n","print('índice j (colunas): ',j)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EVT1XcxmHHe4","executionInfo":{"status":"ok","timestamp":1649722580546,"user_tz":180,"elapsed":287,"user":{"displayName":"Rodrigo Oliveira","userId":"08205894918442543497"}},"outputId":"eb6af604-f316-4c31-d4a1-a97ae76a7a1e"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["condição: \n"," [[False False False]\n"," [ True False False]\n"," [ True  True False]]\n","índice i (linhas):  [1 2 2]\n","índice j (colunas):  [0 0 1]\n"]}]},{"cell_type":"code","source":["#indexação booleana e slicing: selecionar as linhas\n","#de x que possuem algum número par\n","print('x: \\n', x)\n","cond = x % 2 == 0 #números pares\n","print('condição: \\n',cond)\n","\n","# se houver alguma condição True na linha, a soma será > 0 \n","i_row = np.where(np.sum(cond,axis=1))[0]\n","print('índice das liinhas que possuem números pares: ', i_row)\n","print('linhas que possuem números pares: \\n', x[i_row, :])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QhQ9pd6yIiyO","executionInfo":{"status":"ok","timestamp":1649722814603,"user_tz":180,"elapsed":284,"user":{"displayName":"Rodrigo Oliveira","userId":"08205894918442543497"}},"outputId":"cd40a8bc-d894-47dd-a381-c21f48618b8d"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["x: \n"," [[ 1  3  7]\n"," [ 4 11 21]\n"," [42  8  9]]\n","condição: \n"," [[False False False]\n"," [ True False False]\n"," [ True  True False]]\n","índice das liinhas que possuem números pares:  [1 2]\n","linhas que possuem números pares: \n"," [[ 4 11 21]\n"," [42  8  9]]\n"]}]}]}